name: Build macOS PKG (Optimized)

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'
      - 'pkg-v*'

# GitHub Actions ÏµúÏ†ÅÌôîÎ•º ÏúÑÌïú ÎèôÏãú Ïã§Ìñâ Ï†úÌïú
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ÏÇ¨Ï†Ñ Í≤ÄÏ¶ù Îã®Í≥Ñ (LinuxÏóêÏÑú Îπ†Î•¥Í≤å)
  pre-validate:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4

    - name: üîç Check Build Requirements
      id: check
      run: |
        echo "=== Pre-validation ==="

        # ÌïÑÏàò ÌååÏùº ÌôïÏù∏
        missing_files=()
        required_files=("gui_perfect.py" "main.py" ".env" "src" "requirements.txt")

        for file in "${required_files[@]}"; do
          if [[ ! -e "$file" ]]; then
            missing_files+=("$file")
          fi
        done

        if [[ ${#missing_files[@]} -gt 0 ]]; then
          echo "‚ùå Missing required files: ${missing_files[*]}"
          echo "should-build=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "‚úÖ All required files present"
          echo "should-build=true" >> $GITHUB_OUTPUT
        fi

  # macOS PKG ÎπåÎìú (ÏµúÏ†ÅÌôîÎêú)
  build-macos:
    needs: pre-validate
    if: needs.pre-validate.outputs.should-build == 'true'
    runs-on: macos-13  # ÏµúÏã† ÏïàÏ†ï Î≤ÑÏ†Ñ
    timeout-minutes: 40
    env:
      PYTHONUNBUFFERED: 1
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_WARN_SCRIPT_LOCATION: 1

    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # shallow cloneÏúºÎ°ú ÏÜçÎèÑ Ìñ•ÏÉÅ

    - name: üêç Setup Python (Cached)
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.8'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: ‚ö° Install Dependencies (Fast)
      run: |
        echo "üöÄ Fast dependency installation..."

        # pip ÏóÖÍ∑∏Î†àÏù¥Îìú (Ï∫êÏãúÎê®)
        python3 -m pip install --upgrade pip wheel setuptools --quiet

        # ÏùòÏ°¥ÏÑ± ÌïúÎ≤àÏóê ÏÑ§Ïπò (Îçî Îπ†Î¶Ñ)
        pip install -r requirements.txt PyQt6 --quiet --no-warn-script-location

        echo "‚úÖ Dependencies installed successfully"

    - name: üß™ Quick Validation
      run: |
        echo "üîç Quick import tests..."
        python3 -c "import PyQt6; import pandas; import requests; print('‚úÖ Core imports OK')"

    - name: üèóÔ∏è Build App Bundle (Optimized)
      run: |
        echo "üöÄ Building optimized app bundle..."

        APP_NAME="CARRY Route Optimizer.app"
        VERSION="1.0.0"
        BUILD_DATE=$(date +%Y%m%d-%H%M)

        # Ï†ïÎ¶¨
        rm -rf "$APP_NAME" *.pkg pkg_*

        # Ïï± Íµ¨Ï°∞ ÏÉùÏÑ±
        mkdir -p "$APP_NAME/Contents/"{MacOS,Resources}

        # ÏµúÏ†ÅÌôîÎêú Info.plist
        cat > "$APP_NAME/Contents/Info.plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>run_app</string>
    <key>CFBundleIdentifier</key>
    <string>com.carry.routeoptimizer</string>
    <key>CFBundleName</key>
    <string>CARRY Route Optimizer</string>
    <key>CFBundleDisplayName</key>
    <string>CARRY Route Optimizer</string>
    <key>CFBundleVersion</key>
    <string>$VERSION</string>
    <key>CFBundleShortVersionString</key>
    <string>$VERSION</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>NSHighResolutionCapable</key>
    <true/>
    <key>LSMinimumSystemVersion</key>
    <string>10.15</string>
    <key>NSAppleEventsUsageDescription</key>
    <string>CARRY Route Optimizer needs Apple Events access for full functionality.</string>
</dict>
</plist>
EOF

        # Í∞ïÌôîÎêú Îü∞Ï≤ò Ïä§ÌÅ¨Î¶ΩÌä∏
        cat > "$APP_NAME/Contents/MacOS/run_app" << 'EOF'
#!/bin/bash
# CARRY Route Optimizer Launcher - Enhanced
set -e

echo "üöÄ Starting CARRY Route Optimizer..."

# Î¶¨ÏÜåÏä§ ÎîîÎ†âÌÜ†Î¶¨Î°ú Ïù¥Îèô
RESOURCES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../Resources" && pwd)"
cd "$RESOURCES_DIR"

# Python Í≤ΩÎ°ú ÏÑ§Ï†ï
export PYTHONPATH="$RESOURCES_DIR:$PYTHONPATH"

# Python Ïã§Ìñâ (ÏãúÏä§ÌÖú Python Ïö∞ÏÑ†)
if command -v python3 >/dev/null 2>&1; then
    echo "‚úÖ Using system Python3"
    exec python3 gui_perfect.py "$@"
elif [[ -x "/usr/bin/python3" ]]; then
    echo "‚úÖ Using /usr/bin/python3"
    exec /usr/bin/python3 gui_perfect.py "$@"
else
    echo "‚ùå Python3 not found. Please install Python 3.11+"
    osascript -e 'display dialog "Python 3.11+ is required to run CARRY Route Optimizer.\n\nPlease install Python from python.org" buttons {"OK"} default button "OK"'
    exit 1
fi
EOF

        chmod +x "$APP_NAME/Contents/MacOS/run_app"

        # Î¶¨ÏÜåÏä§ Î≥µÏÇ¨ (ÏµúÏ†ÅÌôîÎê®)
        echo "üìÇ Copying resources..."
        cp gui_perfect.py main.py .env "$APP_NAME/Contents/Resources/"
        cp -r src "$APP_NAME/Contents/Resources/"

        echo "‚úÖ App bundle created: $(du -sh "$APP_NAME" | cut -f1)"

    - name: üì¶ Create PKG Installer (Fast)
      run: |
        echo "üì¶ Creating PKG installer..."

        APP_NAME="CARRY Route Optimizer.app"
        PKG_NAME="CARRY-Route-Optimizer-$(date +%Y%m%d).pkg"

        # Ìå®ÌÇ§ÏßÄ Íµ¨Ï°∞
        mkdir -p pkg_payload/Applications
        cp -R "$APP_NAME" pkg_payload/Applications/

        # PKG ÎπåÎìú (Îπ†Î•∏ Î∞©Ïãù)
        pkgbuild \
          --root pkg_payload \
          --identifier com.carry.routeoptimizer.installer \
          --version 1.0.0 \
          --install-location / \
          --quiet \
          "$PKG_NAME"

        # Í≤ÄÏ¶ù
        if [[ -f "$PKG_NAME" ]]; then
          echo "‚úÖ PKG created successfully!"
          echo "üìÅ File: $PKG_NAME"
          echo "üìä Size: $(du -sh "$PKG_NAME" | cut -f1)"

          # Ìå®ÌÇ§ÏßÄ Í≤ÄÏ¶ù
          pkgutil --check-signature "$PKG_NAME" || echo "‚ö†Ô∏è Unsigned package (expected)"
        else
          echo "‚ùå PKG creation failed"
          exit 1
        fi

    - name: üéØ Upload PKG Artifact
      uses: actions/upload-artifact@v4
      with:
        name: CARRY-Route-Optimizer-PKG-${{ github.run_number }}
        path: "*.pkg"
        retention-days: 30
        compression-level: 6  # Îπ†Î•∏ ÏïïÏ∂ï

    - name: üöÄ Create Release (if tagged)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: "*.pkg"
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: ‚úÖ Build Summary
      run: |
        echo "üéâ BUILD COMPLETED SUCCESSFULLY!"
        echo "=================================="
        echo "üì± App Bundle: $(ls -d *.app 2>/dev/null | head -1)"
        echo "üì¶ PKG File: $(ls *.pkg 2>/dev/null | head -1)"
        echo "‚è±Ô∏è Build Time: $(date)"
        echo "üîó Download from: Actions > Artifacts"
        echo ""
        echo "üí° Installation Instructions:"
        echo "1. Download the PKG file from Artifacts"
        echo "2. Double-click to install"
        echo "3. Find app in Applications folder"
        echo "4. Right-click app > Open (for first run security)"
        echo ""
        echo "üìã Build Info:"
        echo "- macOS runner: $(sw_vers -productVersion)"
        echo "- Python: $(python3 --version)"
        echo "- Build ID: ${{ github.run_number }}"

  # ÎπåÎìú Ïã§Ìå® Ïãú ÏïåÎ¶º
  notify-failure:
    needs: [pre-validate, build-macos]
    if: failure()
    runs-on: ubuntu-latest
    steps:
    - name: üì¢ Build Failed Notification
      run: |
        echo "‚ùå macOS PKG Build Failed"
        echo "=========================="
        echo "üîç Check the following:"
        echo "1. GitHub Actions quota (2000 min/month for free)"
        echo "2. macOS runner availability"
        echo "3. Dependency conflicts"
        echo "4. Build logs for specific errors"
        echo ""
        echo "üí° Alternative solutions:"
        echo "1. Try building again (runners may be available)"
        echo "2. Use build-pkg-lite.yml for faster builds"
        echo "3. Consider GitHub Pro for more macOS minutes"