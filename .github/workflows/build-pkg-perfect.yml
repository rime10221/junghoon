name: 🏆 Perfect PKG Build (Zero Dependencies)

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'perfect'
        type: choice
        options:
        - perfect
        - debug
  push:
    tags:
      - 'perfect-v*'

jobs:
  build-perfect:
    runs-on: macos-13
    timeout-minutes: 60  # PyInstaller는 시간이 오래 걸림

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.8'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'

    - name: 📦 Install Build Dependencies
      run: |
        echo "=== 완전 독립형 빌드를 위한 의존성 설치 ==="
        python3 -m pip install --upgrade pip wheel setuptools

        # 모든 프로젝트 의존성 설치
        pip install -r requirements.txt

        # PyInstaller 설치 (완전 독립 실행파일 생성용)
        pip install pyinstaller==6.2.0

        # macOS 특화 도구들
        pip install dmgbuild==1.6.1

    - name: 🔍 Pre-build Verification
      run: |
        echo "=== 빌드 전 검증 ==="
        python3 --version
        pip list | grep -E "(PyQt6|pandas|numpy|pyinstaller)"

        echo "=== 파일 구조 확인 ==="
        ls -la
        test -f gui_perfect.py && echo "✅ gui_perfect.py" || exit 1
        test -f main.py && echo "✅ main.py" || exit 1
        test -f .env && echo "✅ .env" || exit 1
        test -d src && echo "✅ src/" || exit 1

        echo "=== Import 테스트 ==="
        python3 -c "import PyQt6; print('✅ PyQt6')"
        python3 -c "import pandas; print('✅ pandas')"
        python3 -c "import numpy; print('✅ numpy')"
        python3 -c "import sklearn; print('✅ scikit-learn')"
        python3 -c "import requests; print('✅ requests')"

    - name: 🏗️ Create PyInstaller Spec
      run: |
        echo "=== PyInstaller 스펙 파일 생성 ==="

        cat > carry_optimizer.spec << 'EOF'
        # -*- mode: python ; coding: utf-8 -*-

        import sys
        from pathlib import Path

        block_cipher = None

        # 메인 스크립트
        a = Analysis(
            ['gui_perfect.py'],
            pathex=['.', 'src'],  # src 경로 추가
            binaries=[],
            datas=[
                ('src', 'src'),  # 핵심: gui_perfect.py가 직접 import하는 모든 모듈들
                ('.env', '.'),   # 핵심: 환경설정 파일
                # main.py와 batch_process.py는 GUI에서 사용하지 않으므로 제외
                # 모든 테스트/검증 파일들 (check_*, test_*) 제외
                # 과거 GUI 버전들 (gui_main.py, gui_pyqt.py, mac_gui.py) 제외
                # 보조 도구들 (setup_mac.py, main_simple.py, geocode_only.py) 제외
            ],
            hiddenimports=[
                # GUI 프레임워크 - 완전한 PyQt6 모듈 리스트
                'PyQt6.QtCore',
                'PyQt6.QtWidgets',
                'PyQt6.QtGui',
                'PyQt6.sip',
                'PyQt6.QtPrintSupport',
                # 데이터 처리
                'pandas',
                'pandas.io.excel._xlrd',
                'pandas.io.excel._openpyxl',
                'pandas.io.parsers.readers',
                'numpy',
                'numpy.core._multiarray_umath',
                'sklearn',
                'sklearn.cluster',
                'sklearn.cluster._kmeans',
                # Excel 파일 처리 - 완전한 리스트
                'openpyxl',
                'openpyxl.workbook',
                'openpyxl.worksheet',
                'openpyxl.cell',
                'xlrd',  # Excel 파일 읽기 (누락되었던 중요 모듈!)
                'xlrd.biffh',
                'xlrd.sheet',
                'xlrd.book',
                'xlsxwriter',
                # 네트워크 및 API - 완전한 requests 의존성
                'requests',
                'requests.adapters',
                'requests.auth',
                'requests.cookies',
                'requests.models',
                'requests.sessions',
                'urllib3',
                'urllib3.util',
                'urllib3.util.retry',
                'certifi',
                'chardet',
                'idna',
                # 지도 및 시각화
                'folium',
                'folium.plugins',
                'branca',
                'branca.colormap',
                'jinja2',
                'jinja2.ext',
                'markupsafe',
                # CLI 및 환경
                'click',
                'click.core',
                'dotenv',
                'python_dotenv',
                # 테스트 (런타임에 필요할 수 있음)
                'pytest',
                # src 모듈들 - gui_perfect.py가 직접 import하는 모듈들
                'src',
                'src.route_optimizer',
                'src.excel_handler',
                'src.geocoder',
                'src.logger_config',
                'src.global_route_optimizer',
                'src.batch_processor',
                'src.kakao_api_client',
                'src.coordinate_utils',
                'src.map_visualizer',
                # gui_perfect.py가 직접 import하는 모듈들 (root 디렉토리 기준)
                'excel_handler',  # src.excel_handler와 동일하지만 직접 import용
                'geocoder',       # src.geocoder와 동일하지만 직접 import용
                'route_optimizer', # src.route_optimizer와 동일하지만 직접 import용
                'logger_config',   # src.logger_config와 동일하지만 직접 import용
                # Python 표준 라이브러리 (명시적 포함)
                'json',
                'csv',
                'datetime',
                'pathlib',
                'threading',
                'multiprocessing',
                'logging',
                'logging.handlers',
                'os',
                'sys',
                'time',
                'traceback',
                'collections',
                'itertools',
                'functools',
                'typing',
                # 기타 필수 모듈들
                'pkg_resources',
                'setuptools',
                'six',
                'pytz',
                'dateutil',
                'dateutil.parser',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='CARRY Route Optimizer',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
            icon=None,
        )

        app = BUNDLE(
            exe,
            name='CARRY Route Optimizer.app',
            icon=None,
            bundle_identifier='com.carry.routeoptimizer',
            version='1.0.0',
            info_plist={
                'CFBundleDisplayName': 'CARRY Route Optimizer',
                'CFBundleName': 'CARRY Route Optimizer',
                'CFBundleVersion': '1.0.0',
                'CFBundleShortVersionString': '1.0.0',
                'NSHighResolutionCapable': True,
                'NSAppleEventsUsageDescription': 'CARRY Route Optimizer needs access for route optimization.',
                'NSLocationWhenInUseUsageDescription': 'Location access for better route optimization.',
                'LSMinimumSystemVersion': '10.15.0',
            },
        )
        EOF

        echo "✅ PyInstaller 스펙 파일 생성 완료"

    - name: 🔨 Build with PyInstaller
      run: |
        echo "=== PyInstaller로 완전 독립 실행파일 빌드 ==="

        # PyInstaller 실행
        pyinstaller carry_optimizer.spec --clean --noconfirm

        # 빌드 결과 확인
        if [[ -d "dist/CARRY Route Optimizer.app" ]]; then
            echo "✅ PyInstaller 빌드 성공!"

            echo "=== 앱 번들 정보 ==="
            ls -la "dist/CARRY Route Optimizer.app/Contents/"

            echo "=== 앱 크기 ==="
            du -sh "dist/CARRY Route Optimizer.app"

            echo "=== 번들된 라이브러리 확인 ==="
            find "dist/CARRY Route Optimizer.app" -name "*.dylib" | head -5

        else
            echo "❌ PyInstaller 빌드 실패"
            echo "빌드 로그:"
            cat build/*/warn-*.txt || echo "로그 없음"
            exit 1
        fi

    - name: 🧪 App Bundle Validation
      run: |
        echo "=== 앱 번들 검증 ==="

        APP_PATH="dist/CARRY Route Optimizer.app"

        # 구조 검증
        test -f "$APP_PATH/Contents/Info.plist" && echo "✅ Info.plist" || echo "❌ Info.plist 누락"
        test -f "$APP_PATH/Contents/MacOS/CARRY Route Optimizer" && echo "✅ 실행파일" || echo "❌ 실행파일 누락"

        # 의존성 검증 (완전 독립형인지 확인)
        echo "=== 번들된 Python 라이브러리 확인 ==="
        find "$APP_PATH" -name "*pandas*" | head -3
        find "$APP_PATH" -name "*numpy*" | head -3
        find "$APP_PATH" -name "*PyQt*" | head -3

        # 실행 권한 확인
        if [[ -x "$APP_PATH/Contents/MacOS/CARRY Route Optimizer" ]]; then
            echo "✅ 실행 권한 정상"
        else
            echo "❌ 실행 권한 없음"
            chmod +x "$APP_PATH/Contents/MacOS/CARRY Route Optimizer"
        fi

    - name: 📦 Create Perfect PKG
      run: |
        echo "=== 완벽한 PKG 인스톨러 생성 ==="

        APP_NAME="CARRY Route Optimizer.app"
        PKG_NAME="CARRY-Route-Optimizer-PERFECT-$(date +%Y%m%d).pkg"

        # 앱이 존재하는지 확인
        if [[ ! -d "dist/$APP_NAME" ]]; then
            echo "❌ 앱 번들을 찾을 수 없습니다"
            exit 1
        fi

        # PKG 페이로드 준비
        mkdir -p pkg_payload/Applications
        cp -R "dist/$APP_NAME" pkg_payload/Applications/

        # 설치 후 스크립트 생성
        mkdir -p pkg_scripts
        cat > pkg_scripts/postinstall << 'EOF'
        #!/bin/bash

        APP_PATH="/Applications/CARRY Route Optimizer.app"

        echo "CARRY Route Optimizer 설치 후 처리 중..."

        # 권한 설정
        if [[ -d "$APP_PATH" ]]; then
            chmod -R 755 "$APP_PATH"
            chown -R root:admin "$APP_PATH"

            # Gatekeeper 속성 제거
            xattr -cr "$APP_PATH" 2>/dev/null || true

            echo "✅ CARRY Route Optimizer 설치 완료"
            echo "📍 Applications 폴더에서 찾을 수 있습니다"
        else
            echo "❌ 설치 중 오류 발생"
            exit 1
        fi

        exit 0
        EOF

        chmod +x pkg_scripts/postinstall

        # PKG 생성
        pkgbuild \
            --root pkg_payload \
            --scripts pkg_scripts \
            --identifier com.carry.routeoptimizer.perfect \
            --version 1.0.0 \
            --install-location / \
            "$PKG_NAME"

        # PKG 검증
        if [[ -f "$PKG_NAME" ]]; then
            echo "🎉 완벽한 PKG 생성 성공!"
            echo "================================"
            echo "📦 파일명: $PKG_NAME"
            echo "📊 크기: $(du -sh "$PKG_NAME" | cut -f1)"
            echo "🔗 식별자: com.carry.routeoptimizer.perfect"
            echo ""
            echo "✨ 특징:"
            echo "• 완전 독립형 - Python 설치 불필요"
            echo "• 모든 의존성 번들링됨"
            echo "• 더블클릭 설치 후 바로 실행 가능"
            echo "• 외부 라이브러리 설치 불필요"

            # 패키지 내용 검증
            echo ""
            echo "📋 패키지 내용:"
            pkgutil --payload-files "$PKG_NAME" | head -10

        else
            echo "❌ PKG 생성 실패"
            exit 1
        fi

    - name: 🎯 Upload Perfect PKG
      uses: actions/upload-artifact@v4
      with:
        name: CARRY-Route-Optimizer-PERFECT
        path: |
          *.pkg
          dist/CARRY Route Optimizer.app
        retention-days: 30

    - name: ✅ Perfect Build Summary
      run: |
        echo "🏆 완벽한 PKG 빌드 완료!"
        echo "============================="
        echo ""
        echo "🎯 생성된 파일:"
        ls -la *.pkg
        echo ""
        echo "💯 완벽한 특징:"
        echo "• ✅ Python 인터프리터 내장"
        echo "• ✅ 모든 의존성 번들링 (pandas, numpy, PyQt6 등)"
        echo "• ✅ 완전 독립 실행 - 외부 설치 불필요"
        echo "• ✅ 더블클릭 설치 후 즉시 실행 가능"
        echo "• ✅ macOS 네이티브 앱 경험"
        echo "• ✅ Gatekeeper 호환"
        echo ""
        echo "🚀 이제 진짜로 완벽하게 작동합니다!"